buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "GT6Maven"
            url = "https://gregtech.mechaenetia.com/"
        }
        maven {
            name = "gtnh"
            url = "http://jenkins.usrv.eu:8081/nexus/content/groups/public/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2.13'
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.11'
    id 'com.matthewprenger.cursegradle' version '1.0.8'
}

apply plugin: 'forge'
apply plugin: 'java'
apply plugin: 'maven-publish'

apply from: 'gradle.properties'

// This should probably be enabled someday, but it's rather noisy currently...
//allprojects {
//    tasks.withType(JavaCompile) {
//        options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
//    }
//}

group = GROUP
archivesBaseName = ARCHIVE_NAME
version = MAJORVERSION + "." + MINORVERSION + "." + REVISION

targetCompatibility = '1.8'
sourceCompatibility = '1.8'

sourceSets {
    main {
        java.srcDirs = ['src/main/java']
        resources.srcDirs = ['src/main/resources']
        resources.excludes = ['*']
        kotlin.srcDirs = ['src/main/java']
    }
}

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "run"

    srgExtra "PK: org/apache/commons/math3 mods/eln/libs/org/apache/commons/math3"
    srgExtra "PK: kotlin mods/eln/libs/kotlin"
    srgExtra "PK: org/jetbrains/annotations mods/eln/libs/annotations"

    replaceIn "Version.java"
    replace "@VERSION@", project.version
    replace "@MAJORVERSION@", MAJORVERSION
    replace "@MINORVERSION@", MINORVERSION
    replace "@REVISION@", REVISION

    replace "@BUILD_HOST@", BUILD_HOST
    replace "@BUILD_DATE@", BUILD_DATE
    replace "@JAVA_VERSION@", JAVA_VERSION
    replace "@GIT_REVISION@", GIT_REVISION

    replaceIn "Eln.java"
    replace "@VERSION@", project.version
}

configurations {
    external
    compile.extendsFrom external
    shade
    compile.extendsFrom shade
}

repositories {
    mavenCentral()
    maven {
        name = "codechicken"
        url = "http://chickenbones.net/maven"
    }
    maven {
        name = "mobiusstrip"
        url = "http://default.mobiusstrip.eu/maven/"
    }
    maven {
        name = "MineTweaker3"
        url = "http://maven.blamejared.com/"
    }
    maven {
        name = "GT6Maven"
        url = "https://gregtech.mechaenetia.com/"
    }
}

dependencies {
    implementation 'org.apache.commons:commons-math3:3.6.1'
    shade "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compileOnly "mcp.mobius.waila:Waila:1.5.11-RC2-NONEI_1.7.10:dev"
    compileOnly "com.fazecast:jSerialComm:2.6.2"
    compileOnly "ic2:IC2Classic:1.2.1.8:dev"
    implementation "cofh:CoFHCore:1.7.10R3.0.4:dev"
    implementation "cofh:CoFHLib:1.7.10R3.0.3:dev"
    compileOnly "li.cil.oc:OpenComputers:MC1.7.10-1.7.2.1204:dev"
    compileOnly "dan200.computercraft:ComputerCraft:1.75"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }
}

jar {
    manifest {
        attributes 'Built-By': 'Electrical-Age Team'
        attributes 'Build-Date': new Date().format("yyyy-MM-dd HH:mm:ss")
        attributes 'Built-JDK': System.getProperty('java.version')
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-URL': 'https://github.com/jrddunbr/ElectricalAge'
        attributes 'Implementation-Vendor': 'Electrical-Age Team'
        attributes 'Implementation-Vendor-Id': 'net.electricalage.eln'
        attributes 'Project-Url': 'https://eln.ja13.org/'
        attributes 'Source-Compatibility': project.sourceCompatibility
        attributes 'Target-Compatibility': project.targetCompatibility
    }

    // Copy libs jar files
    // from { configurations.external.collect { it.isDirectory() ? it : zipTree(it) } }

    // Add README and LICENSE to the release jar
    from(['README.md', 'LICENSE.md'])

    // Asset whitelist to copy the required asset files into the release jar.
    // Ignore files not used in Minecraft to reduce the release jar size.
    // Copy main files
    from('src/main/resources/assets/eln/') {
        include 'logo.png'
        include 'sounds.json'
        into 'assets/eln/'
    }

    // Copy language files
    from('src/main/resources/assets/eln/lang') {
        include '*.lang'
        into 'assets/eln/lang'
    }

    // Copy model
    from('src/main/resources/assets/eln/model') {
        exclude '_Common'
        exclude '_TEMPLATES'
        exclude 'export_*.png'
        include '**/*.mtl'
        include '**/*.obj'
        include '**/*.txt'
        include '**/*.png'
        into 'assets/eln/model'
    }

    // Copy sounds
    from('src/main/resources/assets/eln/sounds') {
        include '*.ogg'
        into 'assets/eln/sounds'
    }

    // Copy sprites
    from('src/main/resources/assets/eln/sprites') {
        include '**/*.png'
        into 'assets/eln/sprites'
    }

    // Copy sprites
    from('src/main/resources/assets/eln/textures') {
        include '**/*.png'
        into 'assets/eln/textures'
    }
    
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

reobf {}

task devJar(type: Jar) {
    manifest {
        attributes 'Built-By': 'Electrical-Age Team'
        attributes 'Build-Date': new Date().format("yyyy-MM-dd HH:mm:ss")
        attributes 'Built-JDK': System.getProperty('java.version')
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-URL': 'https://github.com/jrddunbr/ElectricalAge'
        attributes 'Implementation-Vendor': 'Electrical-Age Team'
        attributes 'Implementation-Vendor-Id': 'net.electricalage.eln'
        attributes 'Project-Url': 'https://eln.ja13.org/'
        attributes 'Source-Compatibility': project.sourceCompatibility
        attributes 'Target-Compatibility': project.targetCompatibility
    }

    classifier = 'dev'

    from sourceSets.main.output

    // Copy libs jar files
    // from { configurations.external.collect { it.isDirectory() ? it : zipTree(it) } }

    // Add README and LICENSE to the release jar
    from(['README.md', 'LICENSE.md'])

    // Asset whitelist to copy the required asset files into the release jar.
    // Ignore files not used in Minecraft to reduce the release jar size.
    // Copy main files
    from('src/main/resources/assets/eln/') {
        include 'logo.png'
        include 'sounds.json'
        into 'assets/eln/'
    }

    // Copy language files
    from('src/main/resources/assets/eln/lang') {
        include '*.lang'
        into 'assets/eln/lang'
    }

    // Copy model
    from('src/main/resources/assets/eln/model') {
        exclude '_Common'
        exclude '_TEMPLATES'
        exclude 'export_*.png'
        include '**/*.mtl'
        include '**/*.obj'
        include '**/*.txt'
        include '**/*.png'
        into 'assets/eln/model'
    }

    // Copy sounds
    from('src/main/resources/assets/eln/sounds') {
        include '*.ogg'
        into 'assets/eln/sounds'
    }

    // Copy sprites
    from('src/main/resources/assets/eln/sprites') {
        include '**/*.png'
        into 'assets/eln/sprites'
    }

    // Copy sprites
    from('src/main/resources/assets/eln/textures') {
        include '**/*.png'
        into 'assets/eln/textures'
    }

    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

task sourceJar(type: Jar) {
    manifest {}
    classifier = 'sources'
    from sourceSets.main.allSource
    exclude 'assets/**', 'logos/**'
}

task changelog(type: Copy) {
    from('./changelog.md') {
        rename '.*', "$archivesBaseName-$version-changelog.md"
    }
    into './build/libs'
    ext.output = new File("./build/libs/$archivesBaseName-$version-changelog.md")
}
jar.dependsOn changelog

clean {
    // Clean generated/built files. Saves are NOT deleted.
    delete("${minecraft.runDir}/logs")
    delete("${minecraft.runDir}/crash-reports")
}

def getMinecratfDir() {
    String outDir = ""
    final String osName = System.getProperty("os.name").toLowerCase()
    if (osName.contains('windows'))
        outDir = System.getenv("APPDATA") + "/.minecraft"
    else if (osName.contains('os x'))
        outDir = System.getProperty("user.home") + "/Library/Application Support/minecraft"
    else if (osName.contains('linux'))
        outDir = System.getProperty("user.home") + "/.minecraft"
    return outDir
}

// Custom task to build and copy the mod Jar to the default local Minecraft folder
task buildAndCopyJar(dependsOn: 'build', type: Copy) {
    group = 'ELN'
    description = 'Build and copy the mod Jar to the default local Minecraft folder.'

    outputs.upToDateWhen { false } // Force to run this task
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // Overwrite the file if exists

    from("build/libs")
    into(getMinecratfDir() + "/mods")
    include("*.jar")
}

// Update the master language file
task updateMasterLanguageFile(type: JavaExec, dependsOn: 'classes') {
    group = 'ELN'
    description = 'Generate or update the master language file.'

    main = 'mods.eln.i18n.LanguageFileUpdater'
    classpath = sourceSets.main.runtimeClasspath
    args = ['./src', './src/main/resources/assets/eln/lang/en_US.lang']
}

// Until this gets fixed, I'm disabling automatic language file updates.
// It has been causing more harm in merge requests and other jank than good.
// Please be pedantic about making further edits to the language file.
// jar.dependsOn(updateMasterLanguageFile)

idea { module { inheritOutputDirs = true } }

artifacts {
    archives devJar, sourceJar, changelog.output
}

if (!hasProperty("mavenUsername")) {
    ext.mavenUsername="${System.getenv().MAVEN_USERNAME}"
}

if (!hasProperty("mavenPassword")) {
    ext.mavenPassword="${System.getenv().MAVEN_PASSWORD}"
}

if (!hasProperty("mavenURL")) {
    ext.mavenURL="${System.getenv().MAVEN_URL}"
}

//if ( !project.buildInfo.tag.contains("-dirty") && (System.getenv().ONLY_RELEASES!="true" || project.buildInfo.isRelease) ) {
//    task testIfUploadable {}

    uploadArchives {
        dependsOn jar
        repositories {
            mavenDeployer {
                repository(url: mavenURL) {
                    authentication(userName: mavenUsername, password: mavenPassword)
                }
            }
        }
    }
//}
